name: CICD Test
run-name: Running
on:
  push:

env:
  AWS_REGION: ap-northeast-2
#  AWS_S3_BUCKET: plant-s3
#  AWS_CODE_DEPLOY_APPLICATION: cicd-test
#  AWS_CODE_DEPLOY_GROUP: plant-cicd-test

jobs:
  build-with-gradle:
    runs-on: ubuntu-20.04
    steps:
      - name: 체크아웃
        uses: actions/checkout@v3
      - name: JDK 11 설치
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'zulu'
      - name: application.yml 생성
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        shell: bash
      - name: application-prod.yml 생성
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ./application-prod.yml
        shell: bash
      - name: gradlew에 실행 권한 부여
        run: chmod +x ./gradlew
      - name: 프로젝트 빌드
        run: ./gradlew clean build -x test
      - name: Docker build & push to prod
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/docker-test-prod .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
      - name: Docker build & push to dev
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/docker-test-dev .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DEV }} # EC2 퍼블릭 IPv4 DNS
          username: ${{ secrets.USERNAME }} # ubuntu
          password: ${{ secrets.PASSWORD }}
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
            sudo docker run -d -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
            sudo docker image prune -f